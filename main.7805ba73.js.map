{"version":3,"sources":["scripts/main.js"],"names":["container","document","querySelector","domField","messages","startMessage","loserMessage","winnerMessage","header","startButton","restartButton","createElement","classList","add","textContent","scoreContainer","currentScore","matrixModel","size","createMatrix","matrixSize","Array","i","j","render","row","column","fieldCell","rows","cells","remove","window","romoveEventListener","checkKey","generate","arrayOfFreeSpaces","push","Math","floor","random","length","r","c","event","preventDefault","canMoveU","canMoveD","canMoveR","canMoveL","keyCode","moveUp","combineUp","moveDown","combineDown","moveLeft","combineLeft","moveRight","combineRight","isMoved","addEventListener","append"],"mappings":"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","file":"main.7805ba73.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\n//  select the game container\r\nconst container = document.querySelector('.container');\r\n\r\nconst domField = container.querySelector('.game-field');\r\n\r\n// all the messages for the game\r\nconst messages = container.querySelector('.message-container');\r\nconst startMessage = messages.querySelector('.message-start');\r\nconst loserMessage = messages.querySelector('.message-lose');\r\nconst winnerMessage = messages.querySelector('.message-win');\r\n\r\n// the header with logo, button and score value\r\nconst header = container.querySelector('.controls');\r\nconst startButton = header.querySelector('.start');\r\n\r\n// create restart button\r\nconst restartButton = document.createElement('button');\r\n\r\n// and config it\r\nrestartButton.classList.add('restart', 'button');\r\nrestartButton.textContent = 'Restart';\r\n\r\n// select score container\r\nconst scoreContainer = container.querySelector('.game-score');\r\n\r\n// define the score which then we will push to scoreContainer\r\nlet currentScore = 0;\r\n\r\nlet matrixModel = [];\r\n\r\nconst size = 4;\r\n// Create array field\r\n\r\nfunction createMatrix(matrixSize) {\r\n  matrixModel = new Array(matrixSize);\r\n\r\n  for (let i = 0; i < matrixSize; i++) {\r\n    matrixModel[i] = new Array(matrixSize);\r\n\r\n    for (let j = 0; j < 4; j++) {\r\n      matrixModel[i][j] = 0;\r\n    }\r\n  }\r\n}\r\n\r\ncreateMatrix(size);\r\n\r\n// Start game & change start button to restart\r\n\r\nstartButton.addEventListener('click', event => {\r\n  startButton.remove();\r\n  header.append(restartButton);\r\n  startMessage.classList.add('hidden');\r\n  generate();\r\n  generate();\r\n  render();\r\n  window.addEventListener('keydown', checkKey);\r\n});\r\n\r\n// Restart game & reset game field\r\n\r\nrestartButton.addEventListener('click', event => {\r\n  loserMessage.classList.add('hidden');\r\n  currentScore = 0;\r\n  scoreContainer.textContent = currentScore;\r\n  createMatrix(size);\r\n  generate();\r\n  generate();\r\n  render();\r\n  window.addEventListener('keydown', checkKey);\r\n});\r\n\r\n// Build game field\r\nfunction render() {\r\n  for (let row = 0; row < size; row++) {\r\n    for (let column = 0; column < size; column++) {\r\n      const fieldCell = domField.rows[row].cells[column];\r\n\r\n      fieldCell.classList = ['field-cell'];\r\n\r\n      if (matrixModel[row][column] > 0) {\r\n        fieldCell.classList.add(`field-cell--${matrixModel[row][column]}`);\r\n        fieldCell.textContent = `${matrixModel[row][column]}`;\r\n      } else {\r\n        fieldCell.textContent = '';\r\n      }\r\n\r\n      if (matrixModel[row][column] === 2048) {\r\n        winnerMessage.classList.remove('hidden');\r\n        window.romoveEventListener('keydown', checkKey);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction generate() {\r\n  const arrayOfFreeSpaces = [];\r\n\r\n  for (let i = 0; i < size; i++) {\r\n    for (let j = 0; j < size; j++) {\r\n      if (matrixModel[i][j] === 0) {\r\n        arrayOfFreeSpaces.push([i, j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  const [ r, c ]\r\n      = arrayOfFreeSpaces[Math.floor(Math.random() * arrayOfFreeSpaces.length)];\r\n\r\n  matrixModel[r][c] = Math.random() <= 0.1 ? 4 : 2;\r\n}\r\n\r\nfunction checkKey(event) {\r\n  event.preventDefault();\r\n\r\n  // checks to know can we do move up\r\n  const canMoveU = () => {\r\n    for (let column = 0; column < size; column++) {\r\n      for (let row = 1; row < size; row++) {\r\n        if (matrixModel[row][column] > 0\r\n            && (matrixModel[row - 1][column] === matrixModel[row][column]\r\n              || matrixModel[row - 1][column] === 0)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  // checks to know can we do move down\r\n  const canMoveD = () => {\r\n    for (let column = 0; column < size; column++) {\r\n      for (let row = size - 1; row >= 1; row--) {\r\n        if (matrixModel[row - 1][column] > 0\r\n          && (matrixModel[row][column] === matrixModel[row - 1][column]\r\n            || matrixModel[row][column] === 0)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  // checks to know can we do move right\r\n  const canMoveR = () => {\r\n    for (let row = 0; row < size; row++) {\r\n      for (let column = size - 1; column >= 1; column--) {\r\n        if (matrixModel[row][column - 1] > 0\r\n          && (matrixModel[row][column] === matrixModel[row][column - 1]\r\n            || matrixModel[row][column] === 0)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  // checks to know can we do move left\r\n  const canMoveL = () => {\r\n    for (let row = 0; row < size; row++) {\r\n      for (let column = 1; column < size; column++) {\r\n        if (matrixModel[row][column] > 0\r\n          && (matrixModel[row][column] === matrixModel[row][column - 1]\r\n            || matrixModel[row][column - 1] === 0)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  if (!canMoveD() && !canMoveL() && !canMoveR() && !canMoveU()) {\r\n    loserMessage.classList.remove('hidden');\r\n    window.romoveEventListener('keydown', checkKey);\r\n  }\r\n\r\n  if (event.keyCode === 38) {\r\n    if (canMoveU()) {\r\n      moveUp();\r\n      combineUp();\r\n      generate();\r\n      render();\r\n    }\r\n  } else if (event.keyCode === 40) {\r\n    if (canMoveD()) {\r\n      moveDown();\r\n      combineDown();\r\n      generate();\r\n      render();\r\n    }\r\n  } else if (event.keyCode === 37) {\r\n    if (canMoveL()) {\r\n      moveLeft();\r\n      combineLeft();\r\n      generate();\r\n      render();\r\n    }\r\n  } else if (event.keyCode === 39) {\r\n    if (canMoveR()) {\r\n      moveRight();\r\n      combineRight();\r\n      generate();\r\n      render();\r\n    }\r\n  }\r\n}\r\n\r\n// cells of each column move up untill\r\n// all existed moves in current column be done\r\nfunction moveUp() {\r\n  for (let column = 0; column < size; column++) {\r\n    let isMoved = false;\r\n\r\n    for (let row = 1; row < size; row++) {\r\n      if (matrixModel[row - 1][column] === 0\r\n          && matrixModel[row][column] > 0) {\r\n        matrixModel[row - 1][column] = matrixModel[row][column];\r\n        matrixModel[row][column] = 0;\r\n        isMoved = true;\r\n      }\r\n    }\r\n\r\n    if (isMoved) {\r\n      return moveUp();\r\n    }\r\n  }\r\n}\r\n\r\n//  combine cells if they are equal and then call move function\r\nfunction combineUp() {\r\n  for (let column = 0; column < size; column++) {\r\n    for (let row = 1; row < size; row++) {\r\n      if (matrixModel[row - 1][column] === matrixModel[row][column]\r\n        && matrixModel[row][column] > 0) {\r\n        matrixModel[row - 1][column] *= 2;\r\n        matrixModel[row][column] = 0;\r\n        currentScore += matrixModel[row - 1][column];\r\n        scoreContainer.textContent = currentScore;\r\n        moveUp();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// cells of each column move down untill\r\n// all existed moves in current column be done\r\nfunction moveDown() {\r\n  for (let column = 0; column < size; column++) {\r\n    let isMoved = false;\r\n\r\n    for (let row = size - 1; row >= 1; row--) {\r\n      if (matrixModel[row][column] === 0\r\n        && matrixModel[row - 1][column] > 0) {\r\n        matrixModel[row][column] = matrixModel[row - 1][column];\r\n        matrixModel[row - 1][column] = 0;\r\n        isMoved = true;\r\n      }\r\n    }\r\n\r\n    if (isMoved) {\r\n      return moveDown();\r\n    }\r\n  }\r\n}\r\n\r\n//  combine cells if they are equal and then call move function\r\nfunction combineDown() {\r\n  for (let column = 0; column < size; column++) {\r\n    for (let row = size - 1; row >= 1; row--) {\r\n      if (matrixModel[row - 1][column] === matrixModel[row][column]\r\n        && matrixModel[row][column] > 0) {\r\n        matrixModel[row - 1][column] *= 2;\r\n        matrixModel[row][column] = 0;\r\n        currentScore += matrixModel[row - 1][column];\r\n        scoreContainer.textContent = currentScore;\r\n        moveDown();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// cells of each row move left untill\r\n// all existed moves in current row be done\r\nfunction moveLeft() {\r\n  for (let row = 0; row < size; row++) {\r\n    let isMoved = false;\r\n\r\n    for (let column = 1; column < size; column++) {\r\n      if (matrixModel[row][column - 1] === 0\r\n        && matrixModel[row][column] > 0) {\r\n        matrixModel[row][column - 1] = matrixModel[row][column];\r\n        matrixModel[row][column] = 0;\r\n        isMoved = true;\r\n      }\r\n    }\r\n\r\n    if (isMoved) {\r\n      return moveLeft();\r\n    }\r\n  }\r\n}\r\n\r\n//  combine cells if they are equal and then call move function\r\nfunction combineLeft() {\r\n  for (let row = 0; row < size; row++) {\r\n    for (let column = 1; column < size; column++) {\r\n      if (matrixModel[row][column - 1] === matrixModel[row][column]\r\n        && matrixModel[row][column] > 0) {\r\n        matrixModel[row][column - 1] *= 2;\r\n        matrixModel[row][column] = 0;\r\n        currentScore += matrixModel[row][column - 1];\r\n        scoreContainer.textContent = currentScore;\r\n        moveLeft();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// cells of each row move right untill\r\n// all existed moves in current row be done\r\nfunction moveRight() {\r\n  for (let row = 0; row < size; row++) {\r\n    let isMoved = false;\r\n\r\n    for (let column = size - 1; column >= 1; column--) {\r\n      if (matrixModel[row][column] === 0\r\n        && matrixModel[row][column - 1] > 0) {\r\n        matrixModel[row][column] = matrixModel[row][column - 1];\r\n        matrixModel[row][column - 1] = 0;\r\n        isMoved = true;\r\n      }\r\n    }\r\n\r\n    if (isMoved) {\r\n      return moveRight();\r\n    }\r\n  }\r\n}\r\n\r\n//  combine cells if they are equal and then call move functiongi\r\nfunction combineRight() {\r\n  for (let row = 0; row < size; row++) {\r\n    for (let column = size - 1; column >= 1; column--) {\r\n      if (matrixModel[row][column - 1] === matrixModel[row][column]\r\n        && matrixModel[row][column] > 0) {\r\n        matrixModel[row][column - 1] *= 2;\r\n        matrixModel[row][column] = 0;\r\n        currentScore += matrixModel[row][column - 1];\r\n        scoreContainer.textContent = currentScore;\r\n        moveRight(row, column);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}